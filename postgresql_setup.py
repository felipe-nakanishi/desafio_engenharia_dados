import psycopg2

# Conexão ao postgresql:
conn = psycopg2.connect(
    dbname="si_cooperative_cartoes",
    user="admin",
    password="admin",
    host="localhost"
)
cur = conn.cursor()

# Criação de camadas bronze, silver e gold:
cur.execute("""CREATE SCHEMA IF NOT EXISTS bronze;
CREATE SCHEMA IF NOT EXISTS silver;
CREATE SCHEMA IF NOT EXISTS gold;""")


# Criação das tabelas na camada bronze:

cur.execute("""CREATE TABLE IF NOT EXISTS bronze.associado (
    id INTEGER PRIMARY KEY,
    nome VARCHAR(100),
    sobrenome VARCHAR(100),
    idade INTEGER,
    email VARCHAR(255)
);
    CREATE TABLE IF NOT EXISTS bronze.conta (
    id INTEGER PRIMARY KEY,
    tipo VARCHAR(100),
    data_criacao TIMESTAMP,
    id_associado INTEGER
);    
    CREATE TABLE IF NOT EXISTS bronze.cartao (
    id INTEGER PRIMARY KEY,
    num_cartao INTEGER,
    nom_impresso varchar(100),
    data_criacao TIMESTAMP,
    id_conta INTEGER,
    id_associado INTEGER
);
    CREATE TABLE IF NOT EXISTS bronze.movimento (
    id INTEGER PRIMARY KEY,
    vlr_transacao DECIMAL(10,2),
    des_transacao varchar(100),
    data_movimento TIMESTAMP,
    id_cartao INTEGER
);
    CREATE TABLE IF NOT EXISTS bronze.metadados_cargas (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    data_carga TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    nome_arquivo varchar(100),
    tabela_carga varchar(100)
);""")

# Criação das tabelas na camada silver:

cur.execute('''
CREATE TABLE IF NOT EXISTS silver.associado (
    id INTEGER PRIMARY KEY,
    nome VARCHAR(100),
    sobrenome VARCHAR(100),
    idade INTEGER,
    email VARCHAR(255)
);
CREATE TABLE IF NOT EXISTS silver.conta (
    id INTEGER PRIMARY KEY,
    tipo VARCHAR(100),
    data_criacao TIMESTAMP,
    id_associado INTEGER,
    CONSTRAINT fk_associado_conta FOREIGN KEY (id_associado) REFERENCES silver.associado(id)
);
CREATE TABLE IF NOT EXISTS silver.cartao (
    id INTEGER PRIMARY KEY,
    num_cartao INTEGER,
    nom_impresso VARCHAR(100),
    data_criacao TIMESTAMP,
    id_conta INTEGER,
    id_associado INTEGER,
    CONSTRAINT fk_conta_cartao FOREIGN KEY (id_conta) REFERENCES silver.conta(id),
    CONSTRAINT fk_associado_cartao FOREIGN KEY (id_associado) REFERENCES silver.associado(id)
);
CREATE TABLE IF NOT EXISTS silver.movimento (
    id INTEGER PRIMARY KEY,
    vlr_transacao DECIMAL(10,2),
    des_transacao VARCHAR(100),
    data_movimento TIMESTAMP,
    id_cartao INTEGER,
    CONSTRAINT fk_cartao_movimento FOREIGN KEY (id_cartao) REFERENCES silver.cartao(id)
);
CREATE TABLE IF NOT EXISTS silver.metadados_cargas (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    data_carga TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    nome_arquivo varchar(100),
    tabela_carga varchar(100)
);''')


# Criação da tabela na camada gold:

cur.execute("""
CREATE TABLE IF NOT EXISTS gold.movimento_flat AS
SELECT
    associado.nome as nome_associado,
    associado.sobrenome as sobrenome_associado,
    associado.idade as idade_associado,
    movimento.vlr_transacao as vlr_transacao_movimento,
    movimento.des_transacao as des_transacao_movimento,
    movimento.data_movimento as data_movimento,
    cartao.num_cartao as numero_cartao,
    cartao.nom_impresso as nome_impresso_cartao,
    cartao.data_criacao as data_criacao_cartao,
    conta.tipo as tipo_conta,
    conta.data_criacao as data_criacao_conta
FROM silver.associado as associado
INNER JOIN silver.conta as conta ON associado.id = conta.id_associado
INNER JOIN silver.cartao as cartao ON conta.id = cartao.id_conta AND associado.id = conta.id_associado
INNER JOIN silver.movimento as movimento ON cartao.id = movimento.id_cartao;
""")

conn.commit()
cur.close()
conn.close()